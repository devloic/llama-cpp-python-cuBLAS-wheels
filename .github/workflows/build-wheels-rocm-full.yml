name: Build All ROCm Wheels

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag of flash-attention to build: v0.2.11'
        default: 'v0.2.11'
        required: true
        type: string
      config:
        description: 'Override configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'Default'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        default: 'v0.2.11'
        required: true
        type: string
      config:
        description: 'Configurations to build: key1:item1-1,item1-2;key2:item2-1,item2-2'
        default: 'Default'
        required: false
        type: string
      exclude:
        description: 'Exclude build configurations: key1-1:item1-1,key1-2:item1-2;key2-1:item2-1,key2-2:item2-2'
        default: 'Default'
        required: false
        type: string

permissions:
  contents: write

jobs:
  define_matrix:
    name: Define Build Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    defaults:
      run:
        shell: pwsh
    env:
      CONFIGIN: ${{ inputs.config }}
      EXCLUDEIN: ${{ inputs.exclude }}
        
    steps:
      - name: Define Job Output
        id: set-matrix
        run: |
          $matrix = @{
              'os' = 'ubuntu-22.04'
              'pyver' =  "3.10", "3.11"
              'rocm' =  '5.6.1','5.7.1'
              'avx' = "AVX", "AVX2", "basic"
              'rename' = '0', '1'
              
          }
          
          if ($env:CONFIGIN -ne 'Default') {$env:CONFIGIN.split(';').foreach({$matrix[$_.split(':')[0]] = $_.split(':')[1].split(',')})}
          
          if ($env:EXCLUDEIN -notin ('None','Default')) {
              $exclusions = $matrix['exclude']
              $exclusions += $env:EXCLUDEIN.split(';').replace(':','=').replace(',',"`n") | ConvertFrom-StringData
              $matrix['exclude'] = $exclusions
          } elseif ($env:EXCLUDEIN -eq 'None') {$matrix.remove('exclude')}
          
          $matrixOut = ConvertTo-Json $matrix -Compress
          Write-Output ('matrix=' + $matrixOut) >> $env:GITHUB_OUTPUT
          
  build_wheels:
    name: Build ${{ matrix.os }} ${{ matrix.avx }} ROCm ${{ matrix.rocm }} ${{ matrix.rename == '1' && 'Textgen Wheel' || 'Wheel' }} ${{ matrix.pyver }}
    needs: define_matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{ fromJSON(needs.define_matrix.outputs.matrix) }}
    defaults:
      run:
        shell: pwsh
    env:
      PCKGVER: ${{ inputs.version }}
      ROCM_VERSION: ${{ matrix.rocm }}
      AVXVER: ${{ matrix.avx }}

    steps:
      - name: Free Disk Space
        if: runner.os == 'Linux'
        uses: jlumbroso/free-disk-space@v1.2.0
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          swap-storage: false
          
      - uses: actions/checkout@v4
        with:
          repository: 'ROCmSoftwarePlatform/flash-attention'
          ref: ${{ inputs.version }}
          submodules: 'recursive'
          
      - name: Install Linux ROCm SDK
        if: runner.os == 'Linux'
        shell: bash
        run: |
          [ ! -d /etc/apt/keyrings ] && sudo mkdir --parents --mode=0755 /etc/apt/keyrings
          wget https://repo.radeon.com/rocm/rocm.gpg.key -O - | gpg --dearmor | sudo tee /etc/apt/keyrings/rocm.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] https://repo.radeon.com/rocm/apt/$ROCM_VERSION focal main" | sudo tee --append /etc/apt/sources.list.d/rocm.list
          echo -e 'Package: *\nPin: release o=repo.radeon.com\nPin-Priority: 600' | sudo tee /etc/apt/preferences.d/rocm-pin-600
          sudo apt update
          sudo apt install rocm-dev rocblas-dev hipblas-dev -y
     
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.pyver }}
          
      - name: Install Dependencies
        run: |
          python -m pip install build wheel cmake scikit-build ninja
      
      - name: Build Wheel
        run: |
          if ($IsLinux) {
            $env:CC = '/opt/rocm/llvm/bin/clang'
            $env:CXX = '/opt/rocm/llvm/bin/clang++'
            $env:CFLAGS = '-fPIC'
            $env:CXXFLAGS = '-fPIC'
            $env:CMAKE_PREFIX_PATH = '/opt/rocm'
            $env:GITHUB_PATH = "/opt/rocm/bin:$env:GITHUB_PATH"
            $env:ROCM_PATH = "/opt/rocm"
            $env:HIP_PATH = "/opt/rocm"
          }
          $env:VERBOSE = '1'
          $packageVersion = [version]$env:PCKGVER.TrimStart('v')
          
          $gputargets = 'gfx900;gfx906:xnack-;gfx908:xnack-;gfx90a:xnack+;gfx90a:xnack-;gfx1010;gfx1012;gfx1030;gfx1100;gfx1101;gfx1102'
          
          if ($env:AVXVER -eq 'AVX') {$env:CMAKE_ARGS = "-GNinja -DLLAMA_HIPBLAS=ON -DLLAMA_AVX2=off -DLLAMA_FMA=off -DLLAMA_F16C=off -DGPU_TARGETS=$gputargets"}
          if ($env:AVXVER -eq 'AVX512') {$env:CMAKE_ARGS = "-GNinja -DLLAMA_HIPBLAS=ON -DLLAMA_AVX512=on -DGPU_TARGETS=$gputargets"}
          if ($env:AVXVER -eq 'basic') {$env:CMAKE_ARGS = "-GNinja -DLLAMA_HIPBLAS=ON -DLLAMA_AVX=off -DLLAMA_AVX2=off -DLLAMA_FMA=off -DLLAMA_F16C=off -DGPU_TARGETS=$gputargets"}
          if ($env:AVXVER -eq 'AVX2')
          {
              $env:CMAKE_ARGS = "-GNinja -DLLAMA_HIPBLAS=ON -DGPU_TARGETS=$gputargets"
              $buildtag = "+rocm$env:ROCM_VERSION"
          } else {$buildtag = "+rocm$env:ROCM_VERSION$env:AVXVER"}
          
          if ($packageVersion -lt [version]'0.2.0') {
            python -m build --wheel -C--build-option=egg_info "-C--build-option=--tag-build=$buildtag"
          } else {
            $initpath = Join-Path '.' '${{ matrix.rename == '1' && 'llama_cpp_cuda' || 'llama_cpp' }}' '__init__.py' -resolve
            $initcontent = Get-Content $initpath -raw
            $regexstr = '(?s)(?<=__version__ \= ")\d+(?:\.\d+)*(?=")'
            $regexmatch = [Regex]::Matches($initcontent,$regexstr)
            if (!($regexmatch[0].Success)) {throw '__init__.py parsing failed'}
            $newinit = $regexmatch[0].Result(('$`' + '$&' + $buildtag + '$'''))
            New-Item $initpath -itemType File -value $newinit -force
            python -m build --wheel
          }
          
      - name: Upload files to a GitHub release
        id: upload-release
        uses: svenstaro/upload-release-action@2.7.0
        continue-on-error: true
        with:
          file: ./dist/*.whl
          tag: rocm
          file_glob: true
          make_latest: false
          overwrite: true
        
      - uses: actions/upload-artifact@v3
        if: steps.upload-release.outcome == 'failure'
        with:
          name: 'rocm-wheels'
          path: ./dist/*.whl
